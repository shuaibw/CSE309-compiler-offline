<INT> <ID, x> <COMMA, ,> <ID, y> <COMMA, ,> <ID, z> <SEMICOLON, ;> <FLOAT> <ID, ab> <SEMICOLON, ;> <VOID> <ID, foo> <LPAREN, (> <RPAREN, )> <SEMICOLON, ;> <INT> <ID, var> <LPAREN, (> <INT> <ID, a> <COMMA, ,> <INT> <ID, b> <RPAREN, )> <SEMICOLON, ;> <INT> <ID, var> <LPAREN, (> <INT> <ID, a> <COMMA, ,> <INT> <ID, b> <RPAREN, )> <LCURL, {> <ID, a> <ASSIGNOP, => <ID, a> <ADDOP, +> <ID, y> <MULOP, *> <CONST_INT, 2> <SEMICOLON, ;> <RETURN> <ID, a> <ADDOP, +> <ID, b> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, foo> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, x> <ASSIGNOP, => <CONST_INT, 2> <SEMICOLON, ;> <ID, y> <ASSIGNOP, => <ID, x> <ADDOP, -> <CONST_INT, 5> <SEMICOLON, ;> <RCURL, }> <INT> <ID, main> <LPAREN, (> <RPAREN, )> <LCURL, {> <INT> <ID, c> <COMMA, ,> <ID, i> <COMMA, ,> <ID, a> <LTHIRD, [> <CONST_INT, 2> <RTHIRD, ]> <COMMA, ,> <ID, j> <SEMICOLON, ;> <FLOAT> <ID, d> <SEMICOLON, ;> <ID, c> <ASSIGNOP, => <CONST_INT, 4> <SEMICOLON, ;> <ID, d> <ASSIGNOP, => <CONST_FLOAT, 9.5> <SEMICOLON, ;> <ID, j> <ASSIGNOP, => <CONST_INT, 9> <SEMICOLON, ;> <LCURL, {> <ID, a> <LTHIRD, [> <CONST_INT, 0> <RTHIRD, ]> <ASSIGNOP, => <CONST_INT, 1> <SEMICOLON, ;> <ID, a> <LTHIRD, [> <CONST_INT, 1> <RTHIRD, ]> <ASSIGNOP, => <ID, var> <LPAREN, (> <ID, c> <COMMA, ,> <ID, j> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <ID, i> <ASSIGNOP, => <ID, a> <LTHIRD, [> <CONST_INT, 0> <RTHIRD, ]> <ADDOP, +> <ID, a> <LTHIRD, [> <CONST_INT, 1> <RTHIRD, ]> <SEMICOLON, ;> <IF> <LPAREN, (> <ID, c> <RELOP, <> <ID, a> <LTHIRD, [> <CONST_INT, 0> <RTHIRD, ]> <RPAREN, )> <LCURL, {> <ID, c> <ASSIGNOP, => <CONST_INT, 7> <SEMICOLON, ;> <RCURL, }> <IF> <LPAREN, (> <ID, c> <RELOP, <> <ID, d> <RPAREN, )> <LCURL, {> <ID, a> <LTHIRD, [> <CONST_INT, 1> <RTHIRD, ]> <ASSIGNOP, => <ADDOP, -> <ID, a> <LTHIRD, [> <CONST_INT, 1> <RTHIRD, ]> <SEMICOLON, ;> <SEMICOLON, ;> <RCURL, }> <ELSE> <IF> <LPAREN, (> <ID, c> <RELOP, <> <CONST_INT, 2> <MULOP, *> <ID, d> <RPAREN, )> <LCURL, {> <ID, a> <LTHIRD, [> <CONST_INT, 0> <RTHIRD, ]> <ASSIGNOP, => <NOT, !> <LPAREN, (> <CONST_INT, 7> <RELOP, <> <CONST_INT, 5> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <ELSE> <LCURL, {> <ID, d> <ASSIGNOP, => <CONST_INT, 2> <SEMICOLON, ;> <RCURL, }> <FOR> <LPAREN, (> <ID, c> <ASSIGNOP, => <CONST_INT, 0> <SEMICOLON, ;> <ID, c> <RELOP, <> <CONST_INT, 2> <MULOP, *> <ID, d> <ADDOP, +> <CONST_INT, 3> <SEMICOLON, ;> <ID, c> <INCOP, ++> <RPAREN, )> <LCURL, {> <ID, a> <LTHIRD, [> <CONST_INT, 0> <RTHIRD, ]> <ASSIGNOP, => <ID, a> <LTHIRD, [> <CONST_INT, 0> <RTHIRD, ]> <MULOP, *> <CONST_INT, 4> <SEMICOLON, ;> <RCURL, }> <WHILE> <LPAREN, (> <ID, a> <LTHIRD, [> <CONST_INT, 0> <RTHIRD, ]> <DECOP, --> <RPAREN, )> <LCURL, {> <ID, c> <ASSIGNOP, => <ID, c> <ADDOP, -> <CONST_INT, 2> <SEMICOLON, ;> <RCURL, }> <LPAREN, (> <ID, c> <RPAREN, )> <SEMICOLON, ;> <ID, j> <ASSIGNOP, => <CONST_INT, 2> <MULOP, *> <CONST_INT, 3> <ADDOP, +> <LPAREN, (> <CONST_INT, 5> <MULOP, %> <CONST_INT, 3> <RELOP, <> <CONST_INT, 4> <LOGICOP, &&> <CONST_INT, 8> <RPAREN, )> <LOGICOP, ||> <CONST_INT, 2> <SEMICOLON, ;> <ID, d> <ASSIGNOP, => <ID, var> <LPAREN, (> <CONST_INT, 1> <COMMA, ,> <CONST_INT, 2> <MULOP, *> <CONST_INT, 3> <RPAREN, )> <ADDOP, +> <CONST_FLOAT, 3.5> <MULOP, *> <CONST_INT, 2> <SEMICOLON, ;> <RETURN> <CONST_INT, 0> <SEMICOLON, ;> <RCURL, }> 