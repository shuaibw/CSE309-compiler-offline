Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a;

Line 2: statement : var_declaration

int a;

Line 2: statements : statement

int a;

Line 3: variable : ID

Line 3: factor : CONST_INT

9

Line 3: unary_expression : factor

9

Line 3: term : unary_expression

9

Line 3: simple_expression : term

9

Line 3: rel_expression : simple_expression

9

Line 3: logic_expression : rel_expression

9

Line 3: expression : variable ASSIGNOP logic_expression

a=9

Line 3: expression_statement : expression SEMICOLON

a=9;

Line 3: statement : expression_statement

a=9;

Line 3: statements : statements statement

int a;
a=9;

Line 4: variable : ID

Line 4: factor : variable

a

Line 4: unary_expression : factor

a

Line 4: term : unary_expression

a

Line 4: simple_expression : term

a

Line 4: factor : CONST_INT

10

Line 4: unary_expression : factor

10

Line 4: term : unary_expression

10

Line 4: simple_expression : term

10

Line 4: rel_expression : simple_expression RELOP simple_expression

a==10

Line 4: logic_expression : rel_expression

a==10

Line 4: expression : logic_expression

a==10

Line 5: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

Line 5: statements : statement

printf(a);

Line 6: compound_statement : LCURL statements RCURL

{
printf(a);
}

ScopeTable # 1.1.1
ScopeTable # 1.1
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >

Line 6: statement : compound_statement

{
printf(a);
}

Line 6: variable : ID

Line 6: factor : variable

a

Line 6: unary_expression : factor

a

Line 6: term : unary_expression

a

Line 6: simple_expression : term

a

Line 6: factor : CONST_INT

12

Line 6: unary_expression : factor

12

Line 6: term : unary_expression

12

Line 6: simple_expression : term

12

Line 6: rel_expression : simple_expression RELOP simple_expression

a==12

Line 6: logic_expression : rel_expression

a==12

Line 6: expression : logic_expression

a==12

Line 7: variable : ID

Line 7: variable : ID

Line 7: factor : variable

a

Line 7: unary_expression : factor

a

Line 7: term : unary_expression

a

Line 7: simple_expression : term

a

Line 7: factor : CONST_INT

5

Line 7: unary_expression : factor

5

Line 7: term : unary_expression

5

Line 7: simple_expression : simple_expression ADDOP term

a+5

Line 7: rel_expression : simple_expression

a+5

Line 7: logic_expression : rel_expression

a+5

Line 7: expression : variable ASSIGNOP logic_expression

a=a+5

Line 7: expression_statement : expression SEMICOLON

a=a+5;

Line 7: statement : expression_statement

a=a+5;

Line 7: statements : statement

a=a+5;

Line 8: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

Line 8: statements : statements statement

a=a+5;
printf(a);

Line 9: compound_statement : LCURL statements RCURL

{
a=a+5;
printf(a);
}

ScopeTable # 1.1.2
ScopeTable # 1.1
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >

Line 9: statement : compound_statement

{
a=a+5;
printf(a);
}

Line 10: variable : ID

Line 10: variable : ID

Line 10: factor : variable

a

Line 10: unary_expression : factor

a

Line 10: term : unary_expression

a

Line 10: simple_expression : term

a

Line 10: factor : CONST_INT

5

Line 10: unary_expression : factor

5

Line 10: term : unary_expression

5

Line 10: simple_expression : simple_expression ADDOP term

a-5

Line 10: rel_expression : simple_expression

a-5

Line 10: logic_expression : rel_expression

a-5

Line 10: expression : variable ASSIGNOP logic_expression

a=a-5

Line 10: expression_statement : expression SEMICOLON

a=a-5;

Line 10: statement : expression_statement

a=a-5;

Line 10: statements : statement

a=a-5;

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

Line 11: statements : statements statement

a=a-5;
printf(a);

Line 12: compound_statement : LCURL statements RCURL

{
a=a-5;
printf(a);
}

ScopeTable # 1.1.3
ScopeTable # 1.1
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >

Line 12: statement : compound_statement

{
a=a-5;
printf(a);
}

Line 12: statement : IF LPAREN expression RPAREN statement ELSE statement

if(a==12){
a=a+5;
printf(a);
}else {
a=a-5;
printf(a);
}

Line 12: statement : IF LPAREN expression RPAREN statement ELSE statement

if(a==10){
printf(a);
}else if(a==12){
a=a+5;
printf(a);
}else {
a=a-5;
printf(a);
}

Line 12: statements : statements statement

int a;
a=9;
if(a==10){
printf(a);
}else if(a==12){
a=a+5;
printf(a);
}else {
a=a-5;
printf(a);
}

Line 13: compound_statement : LCURL statements RCURL

{
int a;
a=9;
if(a==10){
printf(a);
}else if(a==12){
a=a+5;
printf(a);
}else {
a=a-5;
printf(a);
}
}

ScopeTable # 1.1
6 --> < a : ID >
ScopeTable # 1
6 --> < main : ID >

Line 13: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a;
a=9;
if(a==10){
printf(a);
}else if(a==12){
a=a+5;
printf(a);
}else {
a=a-5;
printf(a);
}
}

Line 13: unit : func_definition

int main(){
int a;
a=9;
if(a==10){
printf(a);
}else if(a==12){
a=a+5;
printf(a);
}else {
a=a-5;
printf(a);
}
}

Line 13: program : unit

int main(){
int a;
a=9;
if(a==10){
printf(a);
}else if(a==12){
a=a+5;
printf(a);
}else {
a=a-5;
printf(a);
}
}

Line 13: start : program

ScopeTable # 1
6 --> < main : ID >

Total number of lines: 13
Total number of errors: 0
