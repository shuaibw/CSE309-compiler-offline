Line 1: type_specifier : INT

int

Line 1: type_specifier : INT

int

Line 1: parameter_list : type_specifier ID

int c

Line 1: type_specifier : INT

int

Line 1: parameter_list : parameter_list COMMA type_specifier ID

int c,int d

Line 1: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int foo(int c,int d);

Line 1: unit : func_declaration

int foo(int c,int d);

Line 1: program : unit

int foo(int c,int d);

Line 2: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: declaration_list : ID

c

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int c;

Line 3: statement : var_declaration

int c;

Line 3: statements : statement

int c;

Line 4: variable : ID

c

Line 4: factor : CONST_INT

1

Line 4: unary_expression : factor

1

Line 4: term : unary_expression

1

Line 4: simple_expression : term

1

Line 4: rel_expression : simple_expression

1

Line 4: logic_expression : rel_expression

1

Line 4: arguments : logic_expression

1

Line 4: factor : CONST_INT

2

Line 4: unary_expression : factor

2

Line 4: term : unary_expression

2

Line 4: simple_expression : term

2

Line 4: rel_expression : simple_expression

2

Line 4: logic_expression : rel_expression

2

Line 4: arguments : arguments COMMA logic_expression

1,2

Line 4: argument_list : arguments

1,2

Line 4: factor : ID LPAREN argument_list RPAREN

Error at line 4: Undefined function foo

foo(1,2)

Line 4: unary_expression : factor

foo(1,2)

Line 4: term : unary_expression

foo(1,2)

Line 4: simple_expression : term

foo(1,2)

Line 4: rel_expression : simple_expression

foo(1,2)

Line 4: logic_expression : rel_expression

foo(1,2)

Line 4: expression : variable ASSIGNOP logic_expression

c=foo(1,2)

Line 4: expression_statement : expression SEMICOLON

c=foo(1,2);

Line 4: statement : expression_statement

c=foo(1,2);

Line 4: statements : statements statement

int c;
c=foo(1,2);

Line 5: compound_statement : LCURL statements RCURL

{
int c;
c=foo(1,2);
}

ScopeTable # 1.1
1 --> < c : ID >
ScopeTable # 1
4 --> < foo : ID >
6 --> < main : ID >

Line 5: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int c;
c=foo(1,2);
}

Line 5: unit : func_definition

int main(){
int c;
c=foo(1,2);
}

Line 5: program : program unit

int foo(int c,int d);
int main(){
int c;
c=foo(1,2);
}

Line 6: type_specifier : INT

int

Line 6: type_specifier : INT

int

Line 6: parameter_list : type_specifier ID

int a

Line 6: type_specifier : INT

int

Line 6: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 7: variable : ID

a

Line 7: factor : variable

a

Line 7: unary_expression : factor

a

Line 7: term : unary_expression

a

Line 7: simple_expression : term

a

Line 7: variable : ID

b

Line 7: factor : variable

b

Line 7: unary_expression : factor

b

Line 7: term : unary_expression

b

Line 7: simple_expression : simple_expression ADDOP term

a+b

Line 7: rel_expression : simple_expression

a+b

Line 7: logic_expression : rel_expression

a+b

Line 7: expression : logic_expression

a+b

Line 7: statement : RETURN expression SEMICOLON

return a+b;

Line 7: statements : statement

return a+b;

Line 8: compound_statement : LCURL statements RCURL

{
return a+b;
}

ScopeTable # 1.2
0 --> < b : ID >
6 --> < a : ID >
ScopeTable # 1
4 --> < foo : ID >
6 --> < main : ID >

Line 8: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int foo(int a,int b){
return a+b;
}

Line 8: unit : func_definition

int foo(int a,int b){
return a+b;
}

Line 8: program : program unit

int foo(int c,int d);
int main(){
int c;
c=foo(1,2);
}
int foo(int a,int b){
return a+b;
}

Line 8: start : program

ScopeTable # 1
4 --> < foo : ID >
6 --> < main : ID >

Total number of lines: 8
Total number of errors: 1
